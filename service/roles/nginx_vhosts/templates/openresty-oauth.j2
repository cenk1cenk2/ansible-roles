{% if openresty_enable_oauth %}
{% filter indent(0, True) %}{% include './openresty-redis-session.j2' %}{% endfilter %}
{% filter indent(0, True) %}{% include './openresty-oauth-headers.j2' %}{% endfilter %}

set $session_secret {{ openresty_session_secret }};

access_by_lua_block {
  local opts = {
    discovery = "{{ openresty_oauth_discovery_url }}",
    client_id = "{{ openresty_oauth_client_id }}",
    client_secret = "{{ openresty_oauth_client_secret }}",

    scope = "{{ openresty_oauth_scope }}",
    redirect_uri = "{{ openresty_oauth_redirect_url }}",
    logout_path = "{{ openresty_oauth_logout_url }}",
    redirect_after_logout_uri = "{{ openresty_oauth_redirect_after_logout_path }}",
    ssl_verify = "{{ openresty_oauth_ssl_verify }}",
    -- Where should the user be redirected after logout from the RP. This option overides any end_session_endpoint that the OP may have provided in the discovery response.

    renew_access_token_on_expiry = true,
    -- whether this plugin shall try to silently renew the access token once it is expired if a refresh token is available.
    -- if it fails to renew the token, the user will be redirected to the authorization endpoint.

    session_contents = { {% for content in openresty_oauth_session_contents %} {{ content }}=true, {% endfor %}},
    -- Whitelist of session content to enable. This can be used to reduce the session size.
    -- When not set everything will be included in the session.
    -- Available are:
    -- id_token, enc_id_token, user, access_token (includes refresh token)

    {% if openresty_oauth_refresh_session_interval is defined %}
    refresh_session_interval = {{ openresty_oauth_refresh_session_interval }},
    {% endif %}

    revoke_tokens_on_logout = true,
    redirect_after_logout_with_id_token_hint = false,
    accept_none_alg = true,
  }

  -- call authenticate for OpenID Connect user authentication
  local oidc = require("resty.openidc")
  {% if nginx_debug %}

  oidc.set_logging(nil, { DEBUG = ngx.INFO })
  {% endif %}

  {% if openresty_enable_redis_session %}
  local res, err, target, session = oidc.authenticate(opts)
  {% else %}
  local res, err = oidc.authenticate(opts)
  {% endif %}

  if err then
    ngx.status = 500
    ngx.say(err)
    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
  end

  {% if openresty_oauth_verification is defined %}
  function contains(list, x)
    for _, v in pairs(list) do
        if v == x then return true end
    end

    return false
  end
  function verification(res)
    {{ openresty_oauth_verification | indent(4) }}
    return false
  end

  if not verification(res) then
    ngx.exit(ngx.HTTP_FORBIDDEN)
  end

  {% endif %}
  ngx.req.set_header("X-OIDC-USER", res.id_token.sub)
  ngx.req.set_header("X-OIDC-TOKEN", res.access_token)
}

{% if openresty_oauth_disable_cache %}
expires           0;
add_header        Cache-Control private;
{% endif %}

{% endif %}
