---
- name: 'ensure target directory exists: {{ copy_files_dest }}'
  file:
    path: '{{ copy_files_dest }}'
    state: directory

- name: ensure directories in the tree exists in {{ copy_files_dest }}
  file:
    path: '{{ copy_files_dest }}/{{ file.path }}'
    state: directory
  with_items: '{{ copy_files_src_all_directories }}'
  loop_control:
    loop_var: file
  when:
    - copy_files_src_all_directories | length > 0
  changed_when: false
  async: 300
  poll: 0
  register: ensure_directories_async_job

- name: wait for job to end
  ansible.builtin.async_status:
    jid: '{{ item.ansible_job_id }}'
    mode: status
  register: async_result
  until: async_result.finished
  retries: 100
  delay: 2
  with_items:
    - '{{ ensure_directories_async_job.results }}'

- async: 300
  poll: 0
  register: copy_files_async_job
  changed_when: false
  block:
    - name: copying files from {{ copy_files_src }}
      ansible.posix.synchronize:
        src: '{{ file.src }}'
        dest: '{{ copy_files_dest }}/{{ file.path }}'
      with_items: '{{ copy_files_src_files }}'
      loop_control:
        loop_var: file
      when:
        - copy_files_src_files | length > 0
      changed_when: false
      async: 300
      poll: 0

- async: 300
  poll: 0
  register: copy_secrets_async_job
  changed_when: false
  block:
    - name: copying secrets from {{ copy_files_src }}
      copy:
        src: '{{ file.src }}'
        dest: '{{ copy_files_dest }}/{{ file.path | regex_replace(".secrets", "") }}'
        decrypt: true
      with_items: '{{ copy_files_src_secrets }}'
      loop_control:
        loop_var: file
      when:
        - copy_files_src_secrets | length > 0

- async: 300
  poll: 0
  register: copy_templates_async_job
  changed_when: false
  block:
    - name: copying templates from {{ copy_files_src }}
      template:
        src: '{{ file.src }}'
        dest: '{{ copy_files_dest }}/{{ file.path | regex_replace(".secrets", "") | regex_replace(".j2$", "") }}'
      with_items: '{{ copy_files_src_templates }}'
      loop_control:
        loop_var: file
      when:
        - copy_files_src_templates | length > 0

- name: wait for job to end
  ansible.builtin.async_status:
    jid: '{{ item.ansible_job_id }}'
    mode: status
  register: async_result
  until: async_result.finished
  retries: 100
  delay: 2
  with_items:
    - '{{ copy_files_async_job.results }}'
    - '{{ copy_templates_async_job.results }}'
    - '{{ copy_secrets_async_job.results }}'
