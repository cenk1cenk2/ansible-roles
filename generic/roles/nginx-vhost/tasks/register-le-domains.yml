---
- name: check that the env file already exists
  stat:
    path: '{{ letsencrypt_env_path }}'
  register: certbot_env_file_exists

- name: importing the file contents to variable
  slurp:
    src: '{{ letsencrypt_env_path }}'
  register: certbot_env_file_contents
  when:
    - certbot_env_file_exists.stat.exists

- name: data
  set_fact:
    certbot_env_file_contents: '{{ certbot_env_file_contents.content | b64decode }}'
  when:
    - certbot_env_file_exists.stat.exists

- name: search for domains in certbot env file
  set_fact:
    certbot_env_file_domains: '{{certbot_env_file_contents | regex_search(''^domains="(.*)"'', ignorecase=True) | regex_replace(''.*"(.*)".*'', ''\1'', ignorecase=True)}}'
  when:
    - certbot_env_file_exists.stat.exists
    - letsencrypt_register_domain is defined

- name: check if domain is already in certbot env file
  set_fact:
    certbot_register_domains: '{{ (certbot_register_domains | default([ ]) + [ item ]) | unique }}'
  when:
    - certbot_env_file_exists.stat.exists
    - letsencrypt_register_domain is defined
    - item not in certbot_env_file_domains
  with_items:
    - '{{ letsencrypt_register_domain }}'

- name: register letsencrypt domains
  set_fact:
    certbot_env_file_contents: '{{ certbot_env_file_contents | regex_replace(''^domains="(.*)"'', ''DOMAINS="'' + certbot_env_file_domains + '' '' + certbot_register_domains | join('' '') + ''"'', ignorecase=True) }}'
  when:
    - certbot_env_file_exists.stat.exists
    - letsencrypt_register_domain is defined
    - certbot_register_domains | default([]) | length > 0

- name: search for subdomains in certbot env file
  set_fact:
    certbot_env_file_subdomains: '{{certbot_env_file_contents | regex_search(''subdomains="(.*)"'', ignorecase=True) | regex_replace(''.*"(.*)".*'', ''\1'', ignorecase=True)}}'
  when:
    - certbot_env_file_exists.stat.exists
    - letsencrypt_register_subdomain is defined

- name: check if subdomain is already in certbot env file
  set_fact:
    certbot_register_subdomains: '{{ (certbot_register_subdomains | default([ ]) + [ item ]) | unique }}'
  when:
    - certbot_env_file_exists.stat.exists
    - letsencrypt_register_subdomain is defined
    - item not in certbot_env_file_subdomains
  with_items:
    - '{{ letsencrypt_register_subdomain }}'

- name: register letsencrypt subdomains
  set_fact:
    certbot_env_file_contents: '{{ certbot_env_file_contents | regex_replace(''subdomains="(.*)"'', ''SUBDOMAINS="'' + certbot_env_file_subdomains + '' '' + certbot_register_subdomains | join('' '') + ''"'', ignorecase=True) }}'
  when:
    - certbot_env_file_exists.stat.exists
    - letsencrypt_register_subdomain is defined
    - certbot_register_subdomains | default([]) | length > 0

- name: write back to certbot environment file
  copy:
    content: '{{ certbot_env_file_contents }}'
    dest: '{{ letsencrypt_env_path }}'
  when:
    - certbot_env_file_exists.stat.exists
    - letsencrypt_register_domain is defined or letsencrypt_register_subdomain is defined
    - certbot_register_domains | default([]) | length > 0 or certbot_register_subdomains | default([]) | length > 0
